name: Delivery
on:
 push:
  # pull_request:
  #   types:
  #     - opened
  #   branches:
  #     - 'main'
jobs:
  terrabuild:
    runs-on: ubuntu-20.04
    outputs:
      exitcode: ${{ steps.apply.outputs.exitcode }}
    env:
      TF_IN_AUTOMATION: "true"
      TF_INPUT: 0
      #TF_LOG: "debug"
      CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
    steps:
      - name: Checkout terraform code
        uses: actions/checkout@v3
        with:
          repository: RaphaeldeGail/probable-packer-infra
      - name: HashiCorp - Setup Terraform
        # You may pin to the exact commit or the version.
        # uses: hashicorp/setup-terraform@d22444889af304a44b997011fbabb81ff705a7b4
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          # The version of Terraform CLI to install. Instead of full version string you can also specify constraint string starting with "<" (for example `<1.13.0`) to install the latest version satisfying the constraint. A value of `latest` will install the latest version of Terraform CLI. Defaults to `latest`.
          terraform_version: 1.1.2
          # Whether or not to install a wrapper to wrap subsequent calls of the `terraform` binary and expose its STDOUT, STDERR, and exit code as outputs named `stdout`, `stderr`, and `exitcode` respectively. Defaults to `true`.
          terraform_wrapper: true # optional, default is true
      - name: Create the backend configuration file
        env:
          BACKEND_CONFIG: ${{ secrets.TF_BACKEND_CONFIG }}
        run: |
          echo $BACKEND_CONFIG | base64 --decode > config.bucket.tfbackend
      - name: Create GCP authentication key.json
        run: echo $CREDENTIALS | base64 --decode > key.json
      - name: Initialize Terraform working directory
        env:
          GOOGLE_CREDENTIALS: key.json
        run: terraform init -reconfigure -no-color -backend-config=config.bucket.tfbackend
      - name: Plan infrastructure update
        env:
          GOOGLE_CREDENTIALS: key.json
          TF_VAR_name: ${{ secrets.NAME }}
          TF_VAR_project: ${{ secrets.PROJECT }}
          TF_VAR_region: ${{ secrets.REGION }}
        run: terraform plan -no-color -out plan.out
      - name: Apply infrastructure update
        env:
          GOOGLE_CREDENTIALS: key.json
        id: apply
        run: terraform apply -no-color plan.out
  buildelivery:
    runs-on: ubuntu-20.04
    container:
      image: raphaeldegail/packer:1.8.0
    needs: [terrabuild]
    if: needs.terrabuild.outputs.exitcode == 0
    env:
      PKR_VAR_name: ${{ secrets.NAME}}
      PKR_VAR_project: ${{ secrets.PROJECT }}
      PKR_VAR_region: ${{ secrets.REGION }}
      PKR_VAR_rsa_key: ${{ secrets.RSA_KEY }}
      PKR_VAR_rsa_pub: ${{ secrets.RSA_PUB }}
      CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Check format of Packer script
        run: packer fmt -check bounce.pkr.hcl
      - name: Initialize packer with plugins
        run: packer init bounce.pkr.hcl 
      - name: Validate Packer script
        run: packer validate bounce.pkr.hcl
      - name: Create GCP authentication key.json
        run: echo $CREDENTIALS | base64 --decode > key.json
      - name: Build Packer image
        env:
          GOOGLE_APPLICATION_CREDENTIALS: key.json
        run: packer build -color=false bounce.pkr.hcl
  clean:
    runs-on: ubuntu-20.04
    needs: [buildelivery]
    if: ${{ always() }}
    env:
      TF_IN_AUTOMATION: "true"
      TF_INPUT: 0
      #TF_LOG: "debug"
      CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
    steps:
      - name: Checkout terraform code
        uses: actions/checkout@v3
        with:
          repository: RaphaeldeGail/probable-packer-infra
      - name: HashiCorp - Setup Terraform
        # You may pin to the exact commit or the version.
        # uses: hashicorp/setup-terraform@d22444889af304a44b997011fbabb81ff705a7b4
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          # The version of Terraform CLI to install. Instead of full version string you can also specify constraint string starting with "<" (for example `<1.13.0`) to install the latest version satisfying the constraint. A value of `latest` will install the latest version of Terraform CLI. Defaults to `latest`.
          terraform_version: 1.1.2
          # Whether or not to install a wrapper to wrap subsequent calls of the `terraform` binary and expose its STDOUT, STDERR, and exit code as outputs named `stdout`, `stderr`, and `exitcode` respectively. Defaults to `true`.
          terraform_wrapper: true # optional, default is true
      - name: Create the backend configuration file
        env:
          BACKEND_CONFIG: ${{ secrets.TF_BACKEND_CONFIG }}
        run: |
          echo $BACKEND_CONFIG | base64 --decode > config.bucket.tfbackend
      - name: Create GCP authentication key.json
        run: echo $CREDENTIALS | base64 --decode > key.json
      - name: Initialize Terraform working directory
        env:
          GOOGLE_CREDENTIALS: key.json
        run: terraform init -reconfigure -no-color -backend-config=config.bucket.tfbackend
      - name: Plan infrastructure destroy
        env:
          GOOGLE_CREDENTIALS: key.json
          TF_VAR_name: "aaa"
          TF_VAR_project: ""
          TF_VAR_region: ""
        run: terraform plan -no-color -destroy -out destroy.out
      - name: Apply infrastructure destruction
        env:
          GOOGLE_CREDENTIALS: key.json
        run: terraform apply -no-color destroy.out
